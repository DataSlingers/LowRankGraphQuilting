gd_edges$y1 <- neuron_location[gd_edges[, 1], "V2"]
gd_edges$x2 <- neuron_location[gd_edges[, 2], "V1"]
gd_edges$y2 <- neuron_location[gd_edges[, 2], "V2"]
p <- base_plot +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = gd_edges,
alpha = 0.7, color = "black", size = 0.1) +
theme(legend.text = element_text(size = 12),
legend.title = element_text(size = 16),
axis.title = element_text(size = 14),
axis.text =  element_text(size = 12)) +
labs(x = "X", y = "Y", title = "", color = "Angular Tuning")
p
ggsave(p, filename = paste0("/D/low-rank-imputation-GQ/images/", "aba_gd_shape_graph",".png"), device = "png", width = 7, height = 5, units = "in", dpi = 300)
FullSel <- read.csv("/D/low-rank-imputation-GQ/low-rank-imputation-GQ/codes/AllenBrainResults/Corr_huge4/K_2_o_150_seed_14169/FullSel.csv", row.names=1)
lr_nucminFit <- read.csv("/D/low-rank-imputation-GQ/low-rank-imputation-GQ/codes/AllenBrainResults/Corr_huge4/K_2_o_150_seed_14169/lr_nucminFit.csv", row.names=1)
lr_gdFit <- read.csv("/D/low-rank-imputation-GQ/low-rank-imputation-GQ/codes/AllenBrainResults/Corr_huge4/K_2_o_150_seed_14169/lr_gdFit.csv", row.names=1)
lr_SVDrotFit <- read.csv("/D/low-rank-imputation-GQ/low-rank-imputation-GQ/codes/AllenBrainResults/Corr_huge4/K_2_o_150_seed_14169/lr_SVD+rotFit.csv", row.names=1)
plt_nucminFit <- read.csv("/D/low-rank-imputation-GQ/low-rank-imputation-GQ/codes/AllenBrainResults/Corr_huge4/K_2_o_150_seed_14169/plt_nucminFit.csv", row.names=1)
plt_gdFit <- read.csv("/D/low-rank-imputation-GQ/low-rank-imputation-GQ/codes/AllenBrainResults/Corr_huge4/K_2_o_150_seed_14169/plt_gdFit.csv", row.names=1)
plt_SVDrotFit <- read.csv("/D/low-rank-imputation-GQ/low-rank-imputation-GQ/codes/AllenBrainResults/Corr_huge4/K_2_o_150_seed_14169/plt_SVD+rotFit.csv", row.names=1)
RecoFit <- read.csv("/D/low-rank-imputation-GQ/low-rank-imputation-GQ/codes/AllenBrainResults/Corr_huge4/K_2_o_150_seed_14169/RecoFit.csv", row.names=1)
Omega <- read.table("/D/low-rank-imputation-GQ/low-rank-imputation-GQ/codes/AllenBrainResults/Corr_huge4/K_2_o_150_seed_14169/Omega.csv", quote="\"", comment.char="")
library(tidyverse)
neuron_tuning <- read.csv("/D/ABA/id_501729039/neuron_orient_tuning.csv")
angle_cat <- read.csv("/D/ABA/id_501729039/pref_angle.csv")
freq_tuning <- read.csv("/D/ABA/id_501729039/neuron_freq_tuning.csv")
neuron_tuning <- left_join(neuron_tuning, angle_cat, by = c("ori_dg" = "X"))
neuron_location <- read.csv("/D/ABA/id_501729039/neuron_location.csv", header = TRUE, row.names=1)
neuron_location <- cbind(neuron_location, neuron_tuning[, c(2, 3)])
neuron_location$X0 <- factor(neuron_location$X0)
base_plot <- ggplot() +
geom_point(aes(x = V1, y = V2, shape = X0), data = neuron_location, size = 2.5) +
scale_shape_manual(values = c(15, 17, 18, 19, 22, 24, 23, 21)) +
theme_bw()
### Full graph
full_edges <- as.data.frame(which(FullSel != 0, arr.ind = TRUE))
full_edges$x1 <- neuron_location[full_edges[, 1], "V1"]
full_edges$y1 <- neuron_location[full_edges[, 1], "V2"]
full_edges$x2 <- neuron_location[full_edges[, 2], "V1"]
full_edges$y2 <- neuron_location[full_edges[, 2], "V2"]
p <- base_plot +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = full_edges,
alpha = 0.7, color = "black", size = 0.1) +
theme(legend.text = element_text(size = 12),
legend.title = element_text(size = 16),
axis.title = element_text(size = 14),
axis.text =  element_text(size = 12)) +
labs(x = "X", y = "Y", title = "", shape = "Angular Tuning")
p
ggsave(p, filename = paste0("/D/low-rank-imputation-GQ/images/", "aba_full_shape_graph",".png"), device = "png", width = 7, height = 5, units = "in", dpi = 300)
### Nucmin graph
nuc_edges <- as.data.frame(which(lr_nucminFit != 0, arr.ind = TRUE))
nuc_edges$x1 <- neuron_location[nuc_edges[, 1], "V1"]
nuc_edges$y1 <- neuron_location[nuc_edges[, 1], "V2"]
nuc_edges$x2 <- neuron_location[nuc_edges[, 2], "V1"]
nuc_edges$y2 <- neuron_location[nuc_edges[, 2], "V2"]
p <- base_plot +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = nuc_edges,
alpha = 0.7, color = "black", size = 0.1) +
theme(legend.text = element_text(size = 12),
legend.title = element_text(size = 16),
axis.title = element_text(size = 14),
axis.text =  element_text(size = 12)) +
labs(x = "X", y = "Y", title = "", shape = "Angular Tuning")
p
ggsave(p, filename = paste0("/D/low-rank-imputation-GQ/images/", "aba_nuc_shape_graph",".png"), device = "png", width = 7, height = 5, units = "in", dpi = 300)
### SVDrot graph
svd_edges <- as.data.frame(which(lr_SVDrotFit != 0, arr.ind = TRUE))
svd_edges$x1 <- neuron_location[svd_edges[, 1], "V1"]
svd_edges$y1 <- neuron_location[svd_edges[, 1], "V2"]
svd_edges$x2 <- neuron_location[svd_edges[, 2], "V1"]
svd_edges$y2 <- neuron_location[svd_edges[, 2], "V2"]
p <- base_plot +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = svd_edges,
alpha = 0.5, color = "black", size = 0.1) +
theme(legend.text = element_text(size = 12),
legend.title = element_text(size = 16),
axis.title = element_text(size = 14),
axis.text =  element_text(size = 12)) +
labs(x = "X", y = "Y", title = "", shape = "Angular Tuning")
p
ggsave(p, filename = paste0("/D/low-rank-imputation-GQ/images/", "aba_svd_shape_graph",".png"), device = "png", width = 7, height = 5, units = "in", dpi = 300)
### GD graph
gd_edges <- as.data.frame(which(lr_gdFit != 0, arr.ind = TRUE))
gd_edges$x1 <- neuron_location[gd_edges[, 1], "V1"]
gd_edges$y1 <- neuron_location[gd_edges[, 1], "V2"]
gd_edges$x2 <- neuron_location[gd_edges[, 2], "V1"]
gd_edges$y2 <- neuron_location[gd_edges[, 2], "V2"]
p <- base_plot +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = gd_edges,
alpha = 0.7, color = "black", size = 0.1) +
theme(legend.text = element_text(size = 12),
legend.title = element_text(size = 16),
axis.title = element_text(size = 14),
axis.text =  element_text(size = 12)) +
labs(x = "X", y = "Y", title = "", shape = "Angular Tuning")
p
ggsave(p, filename = paste0("/D/low-rank-imputation-GQ/images/", "aba_gd_shape_graph",".png"), device = "png", width = 7, height = 5, units = "in", dpi = 300)
p
p <- base_plot +
geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2), data = gd_edges,
alpha = 0.7, color = "black", size = 0.1) +
theme(legend.text = element_text(size = 12),
legend.title = element_text(size = 16),
axis.title = element_text(size = 14),
axis.text =  element_text(size = 12)) +
labs(x = "X", y = "Y", title = "", shape = "Angular Tuning")
p
source("/D/FComp/PSD_proj.R")
source("GraphEstimation/f1calc.R")
?source
source("GraphEstimation/f1calc.R", local = TRUE)
source("GraphEstimation/f1calc.R", local = FALSE)
dirname(sys.frame(1)$ofile)
dirname(sys.frame(1)$ofile)
glasso_estimator <- function(folder_wd){
source("./GraphEstimation/f1calc.R", local = TRUE)
source("./GraphEstimation/PSD_proj.R", local = TRUE)
all_files <- list.files(fold_wd)
for(ii in all_files){
print(ii)
file_wd <- paste0(fold_wd, ii)
setwd(file_wd)
true_precision <- as.matrix(read.csv(paste0(file_wd, "/TruePrecision.csv"),
header=FALSE, stringsAsFactors=FALSE))
imp_err <- read.csv(paste0(file_wd, "/imp_err.csv"),
header=FALSE, stringsAsFactors=FALSE)
ObsCov <- as.matrix(read.csv("ObsCov.csv", header=FALSE))
FullCov <- as.matrix(read.csv("FullCov.csv", header=FALSE))
rownames(ObsCov) <- colnames(ObsCov)
rownames(FullCov) <- colnames(FullCov)
p <- ncol(ObsCov)
Omega <- unlist(read.table("Omega.csv", header = FALSE))
offdiag_ind <- which(Omega-floor(Omega/(p+1))*(p+1)!=1)
group_list <- list.files(pattern = "Obs_[0-9]+")
K <- length(group_list)
obs_groups <- list()
for(ii in 1:length(group_list)){
obs_groups[[ii]] <- as.numeric(read.csv(group_list[ii], header = FALSE))
}
out_full <- huge(FullCov, method = 'glasso', nlambda = 50)
out_full_selection <- which.min(abs(unlist(lapply(out_full$path, sum)) - (sum(true_precision != 0) - p)))
out_full_temp <- as.matrix(out_full$path[[out_full_selection]])
Theta_full <- out_full$icov[[out_full_selection]]
if((min(eigen(ObsCov)$values) <= 0)) {
Obs_psd <- proj_cov(ObsCov, matrix(rep(1,p^2),p,p), 0.01, 1,
matrix(rep(0,p^2),p,p), matrix(rep(1,p^2),p,p), 0.001, 500)$projected_S
rownames(Obs_psd) <- colnames(Obs_psd)
out_temp <- huge(Obs_psd, method="glasso", lambda = c(out_full$lambda, out_full$lambda / 10))
best_ind <- which.min(abs(unlist(lapply(out_temp$path, sum)) -(sum(true_precision != 0) - p)))
Theta_est_temp <- out_temp$icov[[best_ind]]
} else {
out_temp <- huge(ObsCov, method="glasso", lambda = c(out_full$lambda, out_full$lambda / 10))
best_ind <- which.min(abs(unlist(lapply(out_temp$path, sum)) -(sum(true_precision != 0) - p)))
Theta_est_temp <- out_temp$icov[[best_ind]]
}
f1_list <- list()
for(gg in imp_err$V1[-7]){
# for(gg in imp_err$V1[c(1, 3)]){
gg <- str_replace_all(gg, "\\+", "\\\\+")
print(gg)
fn <- list.files(file_wd, gg, full.names = TRUE)
f1_list[[gg]] <- c()
for(kk in fn){
est_cov <- read.csv(kk, header = FALSE)
edge_sel <- huge(as.matrix(est_cov), method = "glasso", lambda = c(out_full$lambda, out_full$lambda / 10))
best_ind <- which.min(abs(unlist(lapply(edge_sel$path, sum)) -(sum(true_precision != 0) - p)))
f1_list[[gg]] <- c(f1_list[[gg]], f1calc(as.matrix(edge_sel$path[[best_ind]]), as.matrix(true_precision))$f1)
}
}
source("/D/low-rank-imputation-GQ/low-rank-imputation-GQ/codes/reco.R")
print(gvf1)
zero_imp <- f1calc(as.matrix(Theta_est_temp), as.matrix(true_precision))$f1
ff1 <- c(unlist(lapply(f1_list, max, na.rm = TRUE)), gvf1, zero_imp)
rownames(ff1) <- c("")
write.csv(ff1, "f1results.csv")
}
}
glass_estimator('/D/')
glasso_estimator('/D/')
setwd('/D/LowRankGraphQuilting')
source("./GraphEstimation/f1calc.R", local = TRUE)
var(c(2, 1))
var(c(2, 1, 2, 1))
var(rep(c(1, 2), 5))
var(rep(c(1, 2), 100))
var(rep(c(1, 2), 10000))
library(lme4)
?aov.
?anova.merMod
?commandArgs
?source
source("f1calc.R", local = TRUE)
source("f1calc.R", local = TRUE)
source("f1calc.R", local = TRUE)
fold_wd = "./Output"
all_files <- list.files(fold_wd)
all_files <- list.files(paste0(fold_wd, "/Imputed"))
all_files <- list.files(paste0(fold_wd, "/Imputed"), full.names = TRUE)
imp_err <- read.csv(paste0(file_wd, "/imp_err.csv"),
header=FALSE, stringsAsFactors=FALSE)
group_list <- read;csv(paste0(fold_wd, "/Obs.csv"))
group_list <- read.csv(paste0(fold_wd, "/Obs.csv"))
View(group_list)
View(group_list)
group_list <- read.csv(paste0(fold_wd, "/Obs.csv"), , header = FALSE)
length(group_list)
K <- length(group_list)
obs_groups <- list()
for(ii in 1:length(group_list)){
obs_groups[[ii]] <-  group_list[ii, ]
}
K <- nrow(group_list)
obs_groups <- list()
for(ii in 1:K){
obs_groups[[ii]] <-  group_list[ii, ]
}
obs_groups
all_files <- list.files(paste0(fold_wd, "/Imputed"), full.names = TRUE)
ii = 0
ii = 1
?list.files
strsplit(all_files, "/")
as.data.frame(strsplit(all_files, "/"))
\data.frame(strsplit(all_files, "/"))
data.frame(strsplit(all_files, "/"))
data.frame(strsplit(all_files, "/"))[length(strsplit(all_files, "/")[[1]]), ]
?data.frame
data.frame("x" = 1)
group_list <- read.csv(paste0(fold_wd, "/Obs.csv"), header = FALSE)
View(group_list)
fold_wd
group_list <- read.csv(paste0(fold_wd, "/Obs.csv"), header = FALSE)
group_list
group_list <- read.csv(paste0(fold_wd, "/Obs.csv"), header = FALSE)
K <- nrow(group_list)
obs_groups <- list()
for(jj in 1:K){
obs_groups[[jj]] <-  group_list[jj, ][which(!is.na(group_list[jj, ]))]
}
View(obs_groups)
?dir.create
ii = 1
fn <- list.files(all_files[ii], full.names = TRUE)
kk = fn[1]
strsplit(kk)
strsplit(kk, "/")
strsplit(strsplit(kk, "/")[[length(strsplit(kk, "/"))]], ".csv")
strsplit(kk, "/")[[length(strsplit(kk, "/"))]]
strsplit(kk, "/")[[1]][[length(strsplit(kk, "/"))]]
strsplit(kk, "/")[[1]][[length(strsplit(kk, "/"))[[1]]]]
strsplit(kk, "/")[[length(strsplit(kk, "/"))[[1]]]]
length(strsplit(kk, "/"))
)
length(strsplit(kk, "/"))
length(strsplit(kk, "/")[[1]])
strsplit(kk, "/")[[length(strsplit(kk, "/")[[1]])]]
strsplit(kk, "/")[[1]][[length(strsplit(kk, "/")[[1]])]]
strsplit(strsplit(kk, "/")[[1]][[length(strsplit(kk, "/")[[1]])]], ".csv")
strsplit(strsplit(kk, "/")[[1]][[length(strsplit(kk, "/")[[1]])]], ".csv")[[1]]
all_files
paste0(graph_dir, strsplit(all_files[ii], "/")[[1]][[length(strsplit(all_files[ii], "/")[[1]])]])
graph_dir <- paste0(fold_wd, "/GraphEstimates")
paste0(graph_dir, strsplit(all_files[ii], "/")[[1]][[length(strsplit(all_files[ii], "/")[[1]])]])
aste0(graph_dir, "/", strsplit(all_files[ii], "/")[[1]][[length(strsplit(all_files[ii], "/")[[1]])]])
fn <- list.files(all_files[ii], full.names = TRUE)
paste0(graph_dir, "/", strsplit(all_files[ii], "/")[[1]][[length(strsplit(all_files[ii], "/")[[1]])]])
f1_list <- list()
f1_list[[1]] <- c()
all_files[ii]
f1_list[[ii]] <- c()
args=(commandArgs(TRUE))
fold_wd = args[[1]]
print(fold_wd)
library(huge)
library(tidyverse)
source("./GraphEstimation/f1calc.R", local = TRUE)
# Saves best F-1 score for each method in output folder as F1Results.csv.
# Inputs:
## fold_wd: directory location of all the estimated graphs matrices.
### Assumes that the imputed covariance matrices are in \GraphEstimates subfolder of fold_wd.
### Assumes that the imputed covariance matrices are the only files in \GraphEstimates subfolder of fold_wd.
graph_analysis <- function(fold_wd){
all_files <- list.files(paste0(fold_wd, "/GraphEstimates"), full.names = TRUE)
true_precision <- read.csv(paste0(fold_wd, "/TruePrecision.csv"),
header=FALSE, stringsAsFactors=FALSE)
f1_list <- list()
for(ii in 1:length(all_files)){
fn <- list.files(all_files[ii], full.names = TRUE)
f1_list[[ii]] <- c()
for(kk in fn){
est_graph <- read.csv(kk, header = FALSE)
f1_list[[ii]] <- c(f1_list[[ii]], f1calc(as.matrix(est_graph), as.matrix(true_precision))$f1)
}
}
# source("./GraphEstimation/reco.R", local = TRUE)
# reco_graph_dir <- paste0(graph_dir, "/MADgq")
# if (!dir.exists(reco_graph_dir)){
#   dir.create(reco_graph_dir)
# }
# write.csv(g_reco, paste0(reco_graph_dir, "/MADgq.csv"))
# # zero_imp <- f1calc(as.matrix(Theta_est_temp), as.matrix(true_precision))$f1
# zero_graph_dir <- paste0(graph_dir, "/Zero")
# if (!dir.exists(zero_graph_dir)){
#   dir.create(zero_graph_dir)
# }
# write.csv(Theta_est_temp, paste0(zero_graph_dir, "/Zero.csv"))
ff1 <- data.frame("Best Index" = c(unlist(lapply(f1_list, which.max, na.rm = TRUE)), 1, 1),
"Best F-1 Score" = c(unlist(lapply(f1_list, max, na.rm = TRUE))))
rownames(ff1) <- data.frame(strsplit(all_files, "/"))[length(strsplit(all_files, "/")[[1]]), ]
write.csv(ff1, paste0(fold_wd, "/F1Results.csv"))
}
graph_analysis(fold_wd)
# Saves best F-1 score for each method in output folder as F1Results.csv.
# Inputs:
## fold_wd: directory location of all the estimated graphs matrices.
### Assumes that the imputed covariance matrices are in \GraphEstimates subfolder of fold_wd.
### Assumes that the imputed covariance matrices are the only files in \GraphEstimates subfolder of fold_wd.
graph_analysis <- function(fold_wd){
all_files <- list.files(paste0(fold_wd, "/GraphEstimates"), full.names = TRUE)
true_precision <- read.csv(paste0(fold_wd, "/TruePrecision.csv"),
header=FALSE, stringsAsFactors=FALSE)
f1_list <- list()
for(ii in 1:length(all_files)){
fn <- list.files(all_files[ii], full.names = TRUE)
f1_list[[ii]] <- c()
for(kk in fn){
est_graph <- read.csv(kk, header = FALSE)
f1_list[[ii]] <- c(f1_list[[ii]], f1calc(as.matrix(est_graph), as.matrix(true_precision))$f1)
}
}
# source("./GraphEstimation/reco.R", local = TRUE)
# reco_graph_dir <- paste0(graph_dir, "/MADgq")
# if (!dir.exists(reco_graph_dir)){
#   dir.create(reco_graph_dir)
# }
# write.csv(g_reco, paste0(reco_graph_dir, "/MADgq.csv"))
# # zero_imp <- f1calc(as.matrix(Theta_est_temp), as.matrix(true_precision))$f1
# zero_graph_dir <- paste0(graph_dir, "/Zero")
# if (!dir.exists(zero_graph_dir)){
#   dir.create(zero_graph_dir)
# }
# write.csv(Theta_est_temp, paste0(zero_graph_dir, "/Zero.csv"))
ff1 <- data.frame("Best Index" = c(unlist(lapply(f1_list, which.max, na.rm = TRUE)), 1, 1),
"Best F-1 Score" = c(unlist(lapply(f1_list, max, na.rm = TRUE))))
rownames(ff1) <- data.frame(strsplit(all_files, "/"))[length(strsplit(all_files, "/")[[1]]), ]
write.csv(ff1, paste0(fold_wd, "/F1Results.csv"))
}
graph_analysis(fold_wd)
all_files <- list.files(paste0(fold_wd, "/GraphEstimates"), full.names = TRUE)
true_precision <- read.csv(paste0(fold_wd, "/TruePrecision.csv"),
header=FALSE, stringsAsFactors=FALSE)
f1_list <- list()
for(ii in 1:length(all_files)){
fn <- list.files(all_files[ii], full.names = TRUE)
f1_list[[ii]] <- c()
for(kk in fn){
est_graph <- read.csv(kk, header = FALSE)
f1_list[[ii]] <- c(f1_list[[ii]], f1calc(as.matrix(est_graph), as.matrix(true_precision))$f1)
}
}
f1_list[[ii]]
f1_list[[ii]] <- c()
graph_analysis <- function(fold_wd){
all_files <- list.files(paste0(fold_wd, "/GraphEstimates"), full.names = TRUE)
true_precision <- read.csv(paste0(fold_wd, "/TruePrecision.csv"),
header=FALSE, stringsAsFactors=FALSE)
f1_list <- list(length.out = length(all_files))
for(ii in 1:length(all_files)){
fn <- list.files(all_files[ii], full.names = TRUE)
f1_list[[ii]] <- c()
for(kk in fn){
est_graph <- read.csv(kk, header = FALSE)
f1_list[[ii]] <- c(f1_list[[ii]], f1calc(as.matrix(est_graph), as.matrix(true_precision))$f1)
}
}
# source("./GraphEstimation/reco.R", local = TRUE)
# reco_graph_dir <- paste0(graph_dir, "/MADgq")
# if (!dir.exists(reco_graph_dir)){
#   dir.create(reco_graph_dir)
# }
# write.csv(g_reco, paste0(reco_graph_dir, "/MADgq.csv"))
# # zero_imp <- f1calc(as.matrix(Theta_est_temp), as.matrix(true_precision))$f1
# zero_graph_dir <- paste0(graph_dir, "/Zero")
# if (!dir.exists(zero_graph_dir)){
#   dir.create(zero_graph_dir)
# }
# write.csv(Theta_est_temp, paste0(zero_graph_dir, "/Zero.csv"))
ff1 <- data.frame("Best Index" = c(unlist(lapply(f1_list, which.max, na.rm = TRUE)), 1, 1),
"Best F-1 Score" = c(unlist(lapply(f1_list, max, na.rm = TRUE))))
rownames(ff1) <- data.frame(strsplit(all_files, "/"))[length(strsplit(all_files, "/")[[1]]), ]
write.csv(ff1, paste0(fold_wd, "/F1Results.csv"))
}
graph_analysis(fold_wd)
all_files <- list.files(paste0(fold_wd, "/GraphEstimates"), full.names = TRUE)
true_precision <- read.csv(paste0(fold_wd, "/TruePrecision.csv"),
header=FALSE, stringsAsFactors=FALSE)
f1_list <- list(length.out = length(all_files))
length(all_files)
all_files <- list.files(paste0(fold_wd, "/GraphEstimates"), full.names = TRUE)
true_precision <- read.csv(paste0(fold_wd, "/TruePrecision.csv"),
header=FALSE, stringsAsFactors=FALSE)
f1_list <- list()
for(ii in 1:length(all_files)){
fn <- list.files(all_files[ii], full.names = TRUE)
f1_list[[ii]] <- c()
for(kk in fn){
est_graph <- read.csv(kk, header = FALSE)
f1_list[[ii]] <- c(f1_list[[ii]], f1calc(as.matrix(est_graph), as.matrix(true_precision))$f1)
}
}
f1_list[[ii]] <- c()
f1_list
f1_list[[ii]] <- c()
f1_list[[ii]] <- c()
f1_list[[ii]] <- c()
f1_list[[ii]] <- c()
f1_list[[ii]] <- c()
f1_list[[ii]] <- c()
f1_list[[ii]] <- c()
f1_list[[ii]] <- c()
f1_list[[ii]] <- c()
f1_list[[ii]] <- c()
f1_list[[ii]] <- c()
f1_list[[ii]] <- c()
f1_list[[ii]] <- c()
f1_list[[ii]] <- c()
f1_list[[ii]] <- list()
f1_list[[ii]] <- list()
f1_list[[ii]] <- c()
f1_list[[ii]] <- vector()
f1_list[[ii]] <- vector()
for(kk in fn){
est_graph <- read.csv(kk, header = FALSE)
f1_list[[ii]] <- c(f1_list[[ii]], f1calc(as.matrix(est_graph), as.matrix(true_precision))$f1)
}
}
f1_list[[ii]] <- numeric()
for(kk in fn){
est_graph <- read.csv(kk, header = FALSE)
f1_list[[ii]] <- c(f1_list[[ii]], f1calc(as.matrix(est_graph), as.matrix(true_precision))$f1)
}
}
f1_list[[ii]] <- numeric()
for(kk in fn){
est_graph <- read.csv(kk, header = FALSE)
f1_list[[ii]] <- c(f1_list[[ii]], f1calc(as.matrix(est_graph), as.matrix(true_precision))$f1)
}
f1_list[[ii]] <- numeric()
est_graph <- read.csv(kk, header = FALSE)
View(est_graph)
est_graph <- read.csv(kk, header = TRUE, row.names = 1)
f1_list[[ii]] <- c(f1_list[[ii]], f1calc(as.matrix(est_graph), as.matrix(true_precision))$f1)
f1_list
true_precision <- read.csv(paste0(fold_wd, "/TruePrecision.csv"),
header=FALSE, stringsAsFactors=FALSE)
as.matrix(est_graph)
for(ii in 1:length(all_files)){
fn <- list.files(all_files[ii], full.names = TRUE)
f1_list[[ii]] <- numeric()
for(kk in fn){
est_graph <- read.csv(kk, header = TRUE, row.names = 1)
f1_list[[ii]] <- c(f1_list[[ii]], f1calc(as.matrix(est_graph), as.matrix(true_precision))$f1)
}
}
ii <- 1
fn <- list.files(all_files[ii], full.names = TRUE)
f1_list[[ii]] <- numeric()
for(kk in fn){
est_graph <- read.csv(kk, header = TRUE, row.names = 1)
f1_list[[ii]] <- c(f1_list[[ii]], f1calc(as.matrix(est_graph), as.matrix(true_precision))$f1)
}
f1_list
ff1 <- data.frame("Best Index" = c(unlist(lapply(f1_list, which.max, na.rm = TRUE)), 1, 1),
"Best F-1 Score" = c(unlist(lapply(f1_list, max, na.rm = TRUE))))
c(unlist(lapply(f1_list, which.max))
c(unlist(lapply(f1_list, which.max)), 1, 1)
ff1 <- data.frame("Best Index" = c(unlist(lapply(f1_list, which.max)), 1, 1),
"Best F-1 Score" = c(unlist(lapply(f1_list, max, na.rm = TRUE))))
ff1
graph_analysis <- function(fold_wd){
all_files <- list.files(paste0(fold_wd, "/GraphEstimates"), full.names = TRUE)
true_precision <- read.csv(paste0(fold_wd, "/TruePrecision.csv"),
header=FALSE, stringsAsFactors=FALSE)
f1_list <- list()
for(ii in 1:length(all_files)){
fn <- list.files(all_files[ii], full.names = TRUE)
f1_list[[ii]] <- numeric()
for(kk in fn){
est_graph <- read.csv(kk, header = TRUE, row.names = 1)
f1_list[[ii]] <- c(f1_list[[ii]], f1calc(as.matrix(est_graph), as.matrix(true_precision))$f1)
}
}
# source("./GraphEstimation/reco.R", local = TRUE)
# reco_graph_dir <- paste0(graph_dir, "/MADgq")
# if (!dir.exists(reco_graph_dir)){
#   dir.create(reco_graph_dir)
# }
# write.csv(g_reco, paste0(reco_graph_dir, "/MADgq.csv"))
# # zero_imp <- f1calc(as.matrix(Theta_est_temp), as.matrix(true_precision))$f1
# zero_graph_dir <- paste0(graph_dir, "/Zero")
# if (!dir.exists(zero_graph_dir)){
#   dir.create(zero_graph_dir)
# }
# write.csv(Theta_est_temp, paste0(zero_graph_dir, "/Zero.csv"))
ff1 <- data.frame("Best Index" = c(unlist(lapply(f1_list, which.max))),
"Best F-1 Score" = c(unlist(lapply(f1_list, max, na.rm = TRUE))))
rownames(ff1) <- data.frame(strsplit(all_files, "/"))[length(strsplit(all_files, "/")[[1]]), ]
write.csv(ff1, paste0(fold_wd, "/F1Results.csv"))
}
ff1
graph_analysis(fold_wd)
